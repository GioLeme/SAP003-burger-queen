{"ast":null,"code":"import _objectSpread from \"/home/giovannasouto/Desktop/lab/burguer-queen/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/home/giovannasouto/Desktop/lab/burguer-queen/src/components/cooker/cooker.js\";\nimport React, { Component } from \"react\";\nimport fire from \"firebase\";\nimport Button from \"@material-ui/core/Button\";\nimport moment from \"moment\";\nimport \"./cooker.css\";\nimport SentimentVeryDissatisfiedIcon from \"@material-ui/icons/SentimentVeryDissatisfied\";\nimport CheckCircleOutlineIcon from \"@material-ui/icons/CheckCircleOutline\";\nimport WarningIcon from \"@material-ui/icons/Warning\";\n\nclass CookerComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      requestList: [],\n      requestStatus: \"\"\n    };\n\n    this.getRequestFirebase = () => {\n      return fire.firestore().collection(\"requests\").get().then(request => {\n        const requestList = [];\n        request.forEach(doc => requestList.push(_objectSpread({}, doc.data(), {\n          id: doc.id\n        })));\n        this.setState({\n          requestList: requestList.filter(request => request.status !== \"done\" && request.status !== \"delivered\")\n        });\n      }).catch(err => err);\n    };\n\n    this.getUserId = () => fire.auth().currentUser.uid;\n\n    this.updateRequest = async (id, status) => {\n      await fire.firestore().collection(\"requests\").doc(id).update({\n        status,\n        cookerId: this.getUserId()\n      });\n      this.getRequestFirebase();\n    };\n\n    this.buttonName = request => {\n      const userId = this.getUserId();\n\n      if (request.status === \"toDo\") {\n        return React.createElement(Button, {\n          style: {\n            backgroundColor: \"#7ed957\",\n            width: \"70%\"\n          },\n          onClick: () => this.updateRequest(request.id, \"doing\"),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56\n          },\n          __self: this\n        }, \" \", \"Preparar\");\n      }\n\n      if (request.status === \"doing\" && request.cookerId !== userId) {\n        return React.createElement(Button, {\n          style: {\n            width: \"70%\"\n          },\n          disabled: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67\n          },\n          __self: this\n        }, \" \", \"Em preparo...\");\n      }\n\n      if (request.status === \"doing\" && request.cookerId === userId) {\n        return React.createElement(Button, {\n          style: {\n            backgroundColor: \"#7ed957\",\n            width: \"70%\"\n          },\n          onClick: () => this.updateRequest(request.id, \"done\"),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75\n          },\n          __self: this\n        }, \" \", React.createElement(CheckCircleOutlineIcon, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80\n          },\n          __self: this\n        }), \" \");\n      }\n    };\n\n    this.createRestaurantManager = () => {\n      return this.state.requestList.map((actualRequest, actualIndex) => {\n        const timeStatus = this.getRequestStatus(this.getTime(actualRequest.createdAt));\n        return React.createElement(\"div\", {\n          key: actualIndex,\n          className: timeStatus + \" \" + \"restaurant-manager\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"info\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96\n          },\n          __self: this\n        }, \"Mesa \", actualRequest.table), React.createElement(\"div\", {\n          className: \"timer\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97\n          },\n          __self: this\n        }, this.statusIcon(timeStatus), \" \", this.getTime(actualRequest.createdAt))), React.createElement(\"div\", {\n          className: \"request\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102\n          },\n          __self: this\n        }, actualRequest.products.map((arrRequest, index) => React.createElement(\"div\", {\n          key: index,\n          className: \"product\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105\n          },\n          __self: this\n        }, \" \", arrRequest.quantity, \" \", arrRequest.name, \" \"), React.createElement(\"p\", {\n          className: \"options-extras\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109\n          },\n          __self: this\n        }, \" \", arrRequest.options || \"\", \" \"), React.createElement(\"p\", {\n          className: \"options-extras\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110\n          },\n          __self: this\n        }, arrRequest.extras ? arrRequest.extras.name : \"\", \" \")))), React.createElement(\"div\", {\n          className: \"button\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          className: \"lateMessage\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117\n          },\n          __self: this\n        }, timeStatus === \"late\" ? \"Atrasado\" : \"\"), this.buttonName(actualRequest)));\n      });\n    };\n\n    this.getTime = time => {\n      const startTime = moment(time, \"DD/MM/YYYY HH:mm\");\n      const now = moment().add(2, \"hours\");\n      return moment(moment(now).diff(startTime, \"HH:mm\")).format(\"HH:mm\");\n    };\n\n    this.getRequestStatus = time => {\n      const minutes = time.slice(-2);\n      const hour = time.slice(1, 2);\n      const handleMinutes = Number(minutes);\n      const handleHours = Number(hour);\n\n      if (handleHours > 0 || handleMinutes > 15) {\n        return \"late\";\n      }\n\n      if (handleMinutes >= 0 && handleMinutes <= 10) {\n        return \"ok\";\n      }\n\n      if (handleMinutes >= 11 && handleMinutes <= 15) {\n        return \"warning\";\n      }\n    };\n\n    this.statusIcon = status => {\n      if (status === \"late\") {\n        return React.createElement(SentimentVeryDissatisfiedIcon, {\n          style: {\n            fill: \"#f57970\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 151\n          },\n          __self: this\n        });\n      }\n\n      if (status === \"warning\") {\n        return React.createElement(WarningIcon, {\n          style: {\n            fill: \"#ffcc4d\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 154\n          },\n          __self: this\n        });\n      }\n\n      if (status === \"ok\") {\n        return React.createElement(CheckCircleOutlineIcon, {\n          style: {\n            fill: \"#7ed957\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157\n          },\n          __self: this\n        });\n      }\n    };\n  }\n\n  async componentWillMount() {\n    await this.getRequestFirebase();\n    setInterval(async () => {\n      await this.getRequestFirebase();\n    }, 30000);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"manager\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, this.createRestaurantManager());\n  }\n\n}\n\nexport default CookerComponent;","map":{"version":3,"sources":["/home/giovannasouto/Desktop/lab/burguer-queen/src/components/cooker/cooker.js"],"names":["React","Component","fire","Button","moment","SentimentVeryDissatisfiedIcon","CheckCircleOutlineIcon","WarningIcon","CookerComponent","constructor","props","state","requestList","requestStatus","getRequestFirebase","firestore","collection","get","then","request","forEach","doc","push","data","id","setState","filter","status","catch","err","getUserId","auth","currentUser","uid","updateRequest","update","cookerId","buttonName","userId","backgroundColor","width","createRestaurantManager","map","actualRequest","actualIndex","timeStatus","getRequestStatus","getTime","createdAt","table","statusIcon","products","arrRequest","index","quantity","name","options","extras","time","startTime","now","add","diff","format","minutes","slice","hour","handleMinutes","Number","handleHours","fill","componentWillMount","setInterval","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport fire from \"firebase\";\nimport Button from \"@material-ui/core/Button\";\nimport moment from \"moment\";\nimport \"./cooker.css\";\nimport SentimentVeryDissatisfiedIcon from \"@material-ui/icons/SentimentVeryDissatisfied\";\nimport CheckCircleOutlineIcon from \"@material-ui/icons/CheckCircleOutline\";\nimport WarningIcon from \"@material-ui/icons/Warning\";\n\nclass CookerComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      requestList: [],\n      requestStatus: \"\"\n    };\n\n    this.getRequestFirebase = () => {\n      return fire\n        .firestore()\n        .collection(\"requests\")\n        .get()\n        .then(request => {\n          const requestList = [];\n          request.forEach(doc =>\n            requestList.push({ ...doc.data(), id: doc.id })\n          );\n          this.setState({\n            requestList: requestList.filter(\n              request =>\n                request.status !== \"done\" && request.status !== \"delivered\"\n            )\n          });\n        })\n        .catch(err => err);\n    };\n\n    this.getUserId = () => fire.auth().currentUser.uid;\n\n    this.updateRequest = async (id, status) => {\n      await fire\n        .firestore()\n        .collection(\"requests\")\n        .doc(id)\n        .update({\n          status,\n          cookerId: this.getUserId()\n        });\n      this.getRequestFirebase();\n    };\n\n    this.buttonName = request => {\n      const userId = this.getUserId();\n      if (request.status === \"toDo\") {\n        return (\n          <Button\n            style={{ backgroundColor: \"#7ed957\", width: \"70%\" }}\n            onClick={() => this.updateRequest(request.id, \"doing\")}\n          >\n            {\" \"}\n            Preparar\n          </Button>\n        );\n      }\n      if (request.status === \"doing\" && request.cookerId !== userId) {\n        return (\n          <Button style={{ width: \"70%\" }} disabled>\n            {\" \"}\n            Em preparo...\n          </Button>\n        );\n      }\n      if (request.status === \"doing\" && request.cookerId === userId) {\n        return (\n          <Button\n            style={{ backgroundColor: \"#7ed957\", width: \"70%\" }}\n            onClick={() => this.updateRequest(request.id, \"done\")}\n          >\n            {\" \"}\n            <CheckCircleOutlineIcon />{\" \"}\n          </Button>\n        );\n      }\n    };\n    this.createRestaurantManager = () => {\n      return this.state.requestList.map((actualRequest, actualIndex) => {\n        const timeStatus = this.getRequestStatus(\n          this.getTime(actualRequest.createdAt)\n        );\n        return (\n          <div\n            key={actualIndex}\n            className={timeStatus + \" \" + \"restaurant-manager\"}\n          >\n            <div className=\"info\">\n              <p>Mesa {actualRequest.table}</p>\n              <div className=\"timer\">\n                {this.statusIcon(timeStatus)}{\" \"}\n                {this.getTime(actualRequest.createdAt)}\n              </div>\n            </div>\n            <div className=\"request\">\n              {actualRequest.products.map((arrRequest, index) => (\n                <div key={index} className=\"product\">\n                  <p>\n                    {\" \"}\n                    {arrRequest.quantity} {arrRequest.name}{\" \"}\n                  </p>\n                  <p className=\"options-extras\"> {arrRequest.options || \"\"} </p>\n                  <p className=\"options-extras\">\n                    {arrRequest.extras ? arrRequest.extras.name : \"\"}{\" \"}\n                  </p>\n                </div>\n              ))}\n            </div>\n            <div className=\"button\">\n              <p className=\"lateMessage\">\n                {timeStatus === \"late\" ? \"Atrasado\" : \"\"}\n              </p>\n              {this.buttonName(actualRequest)}\n            </div>\n          </div>\n        );\n      });\n    };\n\n    this.getTime = time => {\n      const startTime = moment(time, \"DD/MM/YYYY HH:mm\");\n      const now = moment().add(2, \"hours\");\n      return moment(moment(now).diff(startTime, \"HH:mm\")).format(\"HH:mm\");\n    };\n\n    this.getRequestStatus = time => {\n      const minutes = time.slice(-2);\n      const hour = time.slice(1, 2);\n      const handleMinutes = Number(minutes);\n      const handleHours = Number(hour);\n      if (handleHours > 0 || handleMinutes > 15) {\n        return \"late\";\n      }\n      if (handleMinutes >= 0 && handleMinutes <= 10) {\n        return \"ok\";\n      }\n      if (handleMinutes >= 11 && handleMinutes <= 15) {\n        return \"warning\";\n      }\n    };\n\n    this.statusIcon = status => {\n      if (status === \"late\") {\n        return <SentimentVeryDissatisfiedIcon style={{ fill: \"#f57970\" }} />;\n      }\n      if (status === \"warning\") {\n        return <WarningIcon style={{ fill: \"#ffcc4d\" }} />;\n      }\n      if (status === \"ok\") {\n        return <CheckCircleOutlineIcon style={{ fill: \"#7ed957\" }} />;\n      }\n    };\n  }\n\n  async componentWillMount() {\n    await this.getRequestFirebase();\n    setInterval(async () => {\n      await this.getRequestFirebase();\n    }, 30000);\n  }\n\n  render() {\n    return <div className=\"manager\">{this.createRestaurantManager()}</div>;\n  }\n}\n\nexport default CookerComponent;\n"]},"metadata":{},"sourceType":"module"}