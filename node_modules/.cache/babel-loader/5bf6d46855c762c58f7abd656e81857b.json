{"ast":null,"code":"import _objectSpread from \"/home/giovannasouto/Desktop/lab/burguer-queen/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/home/giovannasouto/Desktop/lab/burguer-queen/src/components/cooker/cooker.js\";\nimport React, { Component } from 'react';\nimport fire from 'firebase';\nimport Button from '@material-ui/core/Button';\n\nclass CookerComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      requestList: []\n    };\n\n    this.getRequestFirebase = () => {\n      return fire.firestore().collection('requests').get().then(request => {\n        const requestList = [];\n        request.forEach(doc => requestList.push(_objectSpread({}, doc.data(), {\n          id: doc.id\n        })));\n        this.setState({\n          requestList: requestList.filter(request => request.status !== 'done')\n        });\n      }).catch(err => err);\n    };\n\n    this.getUserId = () => fire.auth().currentUser.uid;\n\n    this.updateRequest = async (id, status) => {\n      await fire.firestore().collection('requests').doc(id).update({\n        status,\n        cookerId: this.getUserId()\n      });\n      this.getRequestFirebase();\n    };\n\n    this.buttonName = (status, id) => {\n      const userId = this.getUserId();\n\n      if (status === 'toDo') {\n        React.createElement(Button, {\n          onClick: () => this.updateRequest(actualRequest.id, 'doing'),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40\n          },\n          __self: this\n        }, \" Preparar\");\n      } else if (status === 'doing' && id !== userId) {\n        React.createElement(Button, {\n          disabled: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43\n          },\n          __self: this\n        }, \" Em preparo...\");\n      } else if (status === 'doing' && id === userId) {\n        React.createElement(Button, {\n          onClick: () => this.updateRequest(actualRequest.id, 'done'),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46\n          },\n          __self: this\n        }, \" Pronto pra entrega!\");\n      }\n    };\n\n    this.createRestaurantManager = () => {\n      return this.state.requestList.map((actualRequest, actualIndex) => React.createElement(\"div\", {\n        key: actualIndex,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, actualRequest.products.map((arrRequest, index) => React.createElement(\"div\", {\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, \"Mesa \", actualRequest.table), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, \" \", arrRequest.quantity, \" \"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, \" \", arrRequest.name, \" \"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, \" \", arrRequest.options || '', \" \"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, \" \", arrRequest.extras ? arrRequest.extras.name : '', \" \"))), React.createElement(Button, {\n        onClick: () => this.updateRequest(actualRequest.id, 'doing'),\n        disabled: actualRequest.status === 'doing',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, this.buttonName(actualRequest.status, actualRequest.cookerId))));\n    };\n  }\n\n  componentWillMount() {\n    this.getRequestFirebase();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, this.createRestaurantManager());\n  }\n\n}\n\nexport default CookerComponent;","map":{"version":3,"sources":["/home/giovannasouto/Desktop/lab/burguer-queen/src/components/cooker/cooker.js"],"names":["React","Component","fire","Button","CookerComponent","constructor","props","state","requestList","getRequestFirebase","firestore","collection","get","then","request","forEach","doc","push","data","id","setState","filter","status","catch","err","getUserId","auth","currentUser","uid","updateRequest","update","cookerId","buttonName","userId","actualRequest","createRestaurantManager","map","actualIndex","products","arrRequest","index","table","quantity","name","options","extras","componentWillMount","render"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,UAAjB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;;AAIA,MAAMC,eAAN,SAA8BH,SAA9B,CAAuC;AACnCI,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAW;AACPC,MAAAA,WAAW,EAAE;AADN,KAAX;;AAIA,SAAKC,kBAAL,GAA0B,MAAM;AAC5B,aAAOP,IAAI,CAACQ,SAAL,GAAiBC,UAAjB,CAA4B,UAA5B,EACNC,GADM,GAENC,IAFM,CAEAC,OAAD,IAAa;AACf,cAAMN,WAAW,GAAG,EAApB;AACAM,QAAAA,OAAO,CAACC,OAAR,CAAgBC,GAAG,IAAIR,WAAW,CAACS,IAAZ,mBAAqBD,GAAG,CAACE,IAAJ,EAArB;AAAiCC,UAAAA,EAAE,EAAEH,GAAG,CAACG;AAAzC,WAAvB;AACA,aAAKC,QAAL,CAAc;AAACZ,UAAAA,WAAW,EAAEA,WAAW,CAACa,MAAZ,CAAmBP,OAAO,IAAIA,OAAO,CAACQ,MAAR,KAAmB,MAAjD;AAAd,SAAd;AACH,OANM,EAONC,KAPM,CAOAC,GAAG,IAAIA,GAPP,CAAP;AAQH,KATD;;AAWA,SAAKC,SAAL,GAAiB,MACbvB,IAAI,CAACwB,IAAL,GAAYC,WAAZ,CAAwBC,GAD5B;;AAIA,SAAKC,aAAL,GAAqB,OAAOV,EAAP,EAAYG,MAAZ,KAAuB;AACxC,YAAMpB,IAAI,CAACQ,SAAL,GAAiBC,UAAjB,CAA4B,UAA5B,EAAwCK,GAAxC,CAA4CG,EAA5C,EAAgDW,MAAhD,CAAuD;AACzDR,QAAAA,MADyD;AAEzDS,QAAAA,QAAQ,EAAE,KAAKN,SAAL;AAF+C,OAAvD,CAAN;AAII,WAAKhB,kBAAL;AACP,KAND;;AAQA,SAAKuB,UAAL,GAAkB,CAACV,MAAD,EAASH,EAAT,KAAgB;AAC9B,YAAMc,MAAM,GAAG,KAAKR,SAAL,EAAf;;AACA,UAAGH,MAAM,KAAK,MAAd,EAAsB;AAClB,4BAAC,MAAD;AAAQ,UAAA,OAAO,EAAG,MAAM,KAAKO,aAAL,CAAmBK,aAAa,CAACf,EAAjC,EAAqC,OAArC,CAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACH,OAFD,MAGK,IAAGG,MAAM,KAAK,OAAX,IAAsBH,EAAE,KAAKc,MAAhC,EAAuC;AACxC,4BAAC,MAAD;AAAQ,UAAA,QAAQ,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACH,OAFI,MAGA,IAAGX,MAAM,KAAK,OAAX,IAAsBH,EAAE,KAAKc,MAAhC,EAAwC;AACzC,4BAAC,MAAD;AAAQ,UAAA,OAAO,EAAE,MAAM,KAAKJ,aAAL,CAAmBK,aAAa,CAACf,EAAjC,EAAqC,MAArC,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACH;AACJ,KAXD;;AAiBA,SAAKgB,uBAAL,GAA+B,MAAM;AAChC,aAAO,KAAK5B,KAAL,CAAWC,WAAX,CAAuB4B,GAAvB,CAA2B,CAACF,aAAD,EAAgBG,WAAhB,KAC9B;AAAK,QAAA,GAAG,EAAEA,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACAH,aAAa,CAACI,QAAd,CAAuBF,GAAvB,CAA2B,CAACG,UAAD,EAAaC,KAAb,KACvB;AAAK,QAAA,GAAG,EAAEA,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAASN,aAAa,CAACO,KAAvB,CADA,EAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAKF,UAAU,CAACG,QAAhB,MAFA,EAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAKH,UAAU,CAACI,IAAhB,MAHA,EAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAKJ,UAAU,CAACK,OAAX,IAAsB,EAA3B,MAJA,EAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAKL,UAAU,CAACM,MAAX,GAAoBN,UAAU,CAACM,MAAX,CAAkBF,IAAtC,GAA6C,EAAlD,MALA,CADJ,CADA,EAUA,oBAAC,MAAD;AACA,QAAA,OAAO,EAAE,MAAM,KAAKd,aAAL,CAAmBK,aAAa,CAACf,EAAjC,EAAqC,OAArC,CADf;AAEA,QAAA,QAAQ,EAAEe,aAAa,CAACZ,MAAd,KAAyB,OAFnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIK,KAAKU,UAAL,CAAgBE,aAAa,CAACZ,MAA9B,EAAsCY,aAAa,CAACH,QAApD,CAJL,CAVA,CADG,CAAP;AAmBJ,KApBD;AAqBH;;AAEDe,EAAAA,kBAAkB,GAAE;AAChB,SAAKrC,kBAAL;AACH;;AAEDsC,EAAAA,MAAM,GAAE;AACJ,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKZ,uBAAL,EADL,CADJ;AAMH;;AAjFkC;;AAqFvC,eAAe/B,eAAf","sourcesContent":["import React, { Component } from 'react';\nimport fire from 'firebase';\nimport Button from '@material-ui/core/Button';\n\n\n\nclass CookerComponent extends Component{\n    constructor(props){\n        super(props)\n        this.state={\n            requestList: []            \n        }\n\n        this.getRequestFirebase = () => {\n            return fire.firestore().collection('requests')\n            .get()\n            .then((request) => {\n                const requestList = []\n                request.forEach(doc => requestList.push({...doc.data(), id: doc.id}) )\n                this.setState({requestList: requestList.filter(request => request.status !== 'done')})\n            })\n            .catch(err => err)\n        }\n\n        this.getUserId = () => (\n            fire.auth().currentUser.uid\n        )\n\n        this.updateRequest = async (id , status) => {          \n            await fire.firestore().collection('requests').doc(id).update({\n                status,\n                cookerId: this.getUserId()\n            })\n                this.getRequestFirebase()\n        }\n\n        this.buttonName = (status, id) => {\n            const userId = this.getUserId()\n            if(status === 'toDo') {\n                <Button onClick= {() => this.updateRequest(actualRequest.id, 'doing' )}> Preparar</Button>\n            }\n            else if(status === 'doing' && id !== userId){\n                <Button disabled> Em preparo...</Button>\n            }\n            else if(status === 'doing' && id === userId) {\n                <Button onClick={() => this.updateRequest(actualRequest.id, 'done' )}> Pronto pra entrega!</Button>                \n            }\n        }\n\n        \n\n        \n\n        this.createRestaurantManager = () => {\n             return this.state.requestList.map((actualRequest, actualIndex) => (\n                 <div key={actualIndex}>\n                {actualRequest.products.map((arrRequest, index) => (\n                     <div key={index}>\n                     <p>Mesa {actualRequest.table}</p>\n                     <p> {arrRequest.quantity} </p>\n                     <p> {arrRequest.name} </p>\n                     <p> {arrRequest.options || ''} </p>\n                     <p> {arrRequest.extras ? arrRequest.extras.name : ''} </p>\n                     </div>\n                ))}\n                 <Button \n                 onClick={() => this.updateRequest(actualRequest.id, 'doing' )} \n                 disabled={actualRequest.status === 'doing'}\n                 >\n                     {this.buttonName(actualRequest.status, actualRequest.cookerId)}\n                 </Button>\n                 </div>\n             ))\n        }\n    }\n\n    componentWillMount(){\n        this.getRequestFirebase()\n    }\n\n    render(){\n        return(\n            <div>\n                {this.createRestaurantManager()}\n\n            </div>\n        )\n    }\n}\n\n\nexport default CookerComponent\n"]},"metadata":{},"sourceType":"module"}